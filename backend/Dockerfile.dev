# 🤖 AI-Optimized Development Dockerfile
# 📝 專為開發環境優化的後端容器
# 
# 🚀 開發環境特色：
# ✅ 熱重載和即時程式碼同步
# ✅ 除錯工具和開發依賴
# ✅ 快速啟動和增量建構
# ✅ 開發者友善的工具鏈
# ✅ 安全性更新和效能優化

FROM node:20-alpine AS development

# 安裝安全更新和開發工具
RUN apk update && apk upgrade && \
    apk add --no-cache \
    python3 \
    make \
    g++ \
    curl \
    git \
    bash \
    vim && \
    rm -rf /var/cache/apk/*

# 設定工作目錄
WORKDIR /app

# 複製 package files
COPY package*.json ./

# 安裝所有依賴 (包含開發依賴)
RUN npm ci --include=dev --no-audit && \
    (npm audit fix --force || true)

# 複製原始碼 (在開發模式下會被 volume 覆蓋)
COPY . .

# 建立必要目錄並設定權限
RUN mkdir -p logs dist && \
    chown -R node:node /app

# 設定環境變數
ENV NODE_ENV=development
ENV DEBUG=*

# 切換到 node 用戶
USER node

# 暴露端口 (3000: 應用程式, 9229: Node.js 除錯)
EXPOSE 3000 9229

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# 開發模式啟動命令 (支援除錯)
CMD ["npm", "run", "dev"]