# 🤖 AI-Optimized Development Docker Compose
# 📝 專為開發環境優化的容器配置
# 
# 🚀 開發環境特色：
# ✅ 熱重載和即時程式碼同步
# ✅ 開發工具和除錯支援
# ✅ 快速啟動和資源優化
# ✅ 開發者友善的日誌和監控

# Docker Compose file for development environment

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: taiwan-transport-backend-dev
    ports:
      - "${BACKEND_PORT:-3000}:3000"
      - "9229:9229"  # Node.js 除錯端口
    environment:
      - NODE_ENV=development
      - PORT=3000
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - DEBUG=${DEBUG:-taiwan-transport:*}
      - TZ=${TZ:-Asia/Taipei}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:8080}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    env_file:
      - .env
    volumes:
      # 開發模式：掛載原始碼以支援熱重載
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - backend_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: npm run dev
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: taiwan-transport-frontend-dev
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    environment:
      - NODE_ENV=development
      - VUE_APP_API_URL=${VUE_APP_API_URL:-http://localhost:3000}
      - VUE_APP_GOOGLE_MAPS_API_KEY=${VUE_APP_GOOGLE_MAPS_API_KEY}
      - TZ=${TZ:-Asia/Taipei}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    env_file:
      - .env
    volumes:
      # 開發模式：掛載原始碼以支援熱重載
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  redis:
    extends:
      file: docker-compose.yml
      service: redis

volumes:
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  app-network:
    driver: bridge